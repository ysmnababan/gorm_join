// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"join/model"
)

func newRolesNavigation(db *gorm.DB, opts ...gen.DOOption) rolesNavigation {
	_rolesNavigation := rolesNavigation{}

	_rolesNavigation.rolesNavigationDo.UseDB(db, opts...)
	_rolesNavigation.rolesNavigationDo.UseModel(&model.RolesNavigation{})

	tableName := _rolesNavigation.rolesNavigationDo.TableName()
	_rolesNavigation.ALL = field.NewAsterisk(tableName)
	_rolesNavigation.RoleNavigationID = field.NewInt32(tableName, "role_navigation_id")
	_rolesNavigation.RoleID = field.NewString(tableName, "role_id")
	_rolesNavigation.NavigationID = field.NewString(tableName, "navigation_id")
	_rolesNavigation.AllowRead = field.NewBool(tableName, "allow_read")
	_rolesNavigation.AllowCreate = field.NewBool(tableName, "allow_create")
	_rolesNavigation.AllowUpdate = field.NewBool(tableName, "allow_update")
	_rolesNavigation.AllowDelete = field.NewBool(tableName, "allow_delete")
	_rolesNavigation.AllowApproval = field.NewBool(tableName, "allow_approval")

	_rolesNavigation.fillFieldMap()

	return _rolesNavigation
}

type rolesNavigation struct {
	rolesNavigationDo rolesNavigationDo

	ALL              field.Asterisk
	RoleNavigationID field.Int32
	RoleID           field.String
	NavigationID     field.String
	AllowRead        field.Bool
	AllowCreate      field.Bool
	AllowUpdate      field.Bool
	AllowDelete      field.Bool
	AllowApproval    field.Bool

	fieldMap map[string]field.Expr
}

func (r rolesNavigation) Table(newTableName string) *rolesNavigation {
	r.rolesNavigationDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r rolesNavigation) As(alias string) *rolesNavigation {
	r.rolesNavigationDo.DO = *(r.rolesNavigationDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *rolesNavigation) updateTableName(table string) *rolesNavigation {
	r.ALL = field.NewAsterisk(table)
	r.RoleNavigationID = field.NewInt32(table, "role_navigation_id")
	r.RoleID = field.NewString(table, "role_id")
	r.NavigationID = field.NewString(table, "navigation_id")
	r.AllowRead = field.NewBool(table, "allow_read")
	r.AllowCreate = field.NewBool(table, "allow_create")
	r.AllowUpdate = field.NewBool(table, "allow_update")
	r.AllowDelete = field.NewBool(table, "allow_delete")
	r.AllowApproval = field.NewBool(table, "allow_approval")

	r.fillFieldMap()

	return r
}

func (r *rolesNavigation) WithContext(ctx context.Context) *rolesNavigationDo {
	return r.rolesNavigationDo.WithContext(ctx)
}

func (r rolesNavigation) TableName() string { return r.rolesNavigationDo.TableName() }

func (r rolesNavigation) Alias() string { return r.rolesNavigationDo.Alias() }

func (r rolesNavigation) Columns(cols ...field.Expr) gen.Columns {
	return r.rolesNavigationDo.Columns(cols...)
}

func (r *rolesNavigation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *rolesNavigation) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 8)
	r.fieldMap["role_navigation_id"] = r.RoleNavigationID
	r.fieldMap["role_id"] = r.RoleID
	r.fieldMap["navigation_id"] = r.NavigationID
	r.fieldMap["allow_read"] = r.AllowRead
	r.fieldMap["allow_create"] = r.AllowCreate
	r.fieldMap["allow_update"] = r.AllowUpdate
	r.fieldMap["allow_delete"] = r.AllowDelete
	r.fieldMap["allow_approval"] = r.AllowApproval
}

func (r rolesNavigation) clone(db *gorm.DB) rolesNavigation {
	r.rolesNavigationDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r rolesNavigation) replaceDB(db *gorm.DB) rolesNavigation {
	r.rolesNavigationDo.ReplaceDB(db)
	return r
}

type rolesNavigationDo struct{ gen.DO }

func (r rolesNavigationDo) Debug() *rolesNavigationDo {
	return r.withDO(r.DO.Debug())
}

func (r rolesNavigationDo) WithContext(ctx context.Context) *rolesNavigationDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r rolesNavigationDo) ReadDB() *rolesNavigationDo {
	return r.Clauses(dbresolver.Read)
}

func (r rolesNavigationDo) WriteDB() *rolesNavigationDo {
	return r.Clauses(dbresolver.Write)
}

func (r rolesNavigationDo) Session(config *gorm.Session) *rolesNavigationDo {
	return r.withDO(r.DO.Session(config))
}

func (r rolesNavigationDo) Clauses(conds ...clause.Expression) *rolesNavigationDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r rolesNavigationDo) Returning(value interface{}, columns ...string) *rolesNavigationDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r rolesNavigationDo) Not(conds ...gen.Condition) *rolesNavigationDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r rolesNavigationDo) Or(conds ...gen.Condition) *rolesNavigationDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r rolesNavigationDo) Select(conds ...field.Expr) *rolesNavigationDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r rolesNavigationDo) Where(conds ...gen.Condition) *rolesNavigationDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r rolesNavigationDo) Order(conds ...field.Expr) *rolesNavigationDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r rolesNavigationDo) Distinct(cols ...field.Expr) *rolesNavigationDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r rolesNavigationDo) Omit(cols ...field.Expr) *rolesNavigationDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r rolesNavigationDo) Join(table schema.Tabler, on ...field.Expr) *rolesNavigationDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r rolesNavigationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *rolesNavigationDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r rolesNavigationDo) RightJoin(table schema.Tabler, on ...field.Expr) *rolesNavigationDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r rolesNavigationDo) Group(cols ...field.Expr) *rolesNavigationDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r rolesNavigationDo) Having(conds ...gen.Condition) *rolesNavigationDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r rolesNavigationDo) Limit(limit int) *rolesNavigationDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r rolesNavigationDo) Offset(offset int) *rolesNavigationDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r rolesNavigationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *rolesNavigationDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r rolesNavigationDo) Unscoped() *rolesNavigationDo {
	return r.withDO(r.DO.Unscoped())
}

func (r rolesNavigationDo) Create(values ...*model.RolesNavigation) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r rolesNavigationDo) CreateInBatches(values []*model.RolesNavigation, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r rolesNavigationDo) Save(values ...*model.RolesNavigation) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r rolesNavigationDo) First() (*model.RolesNavigation, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RolesNavigation), nil
	}
}

func (r rolesNavigationDo) Take() (*model.RolesNavigation, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RolesNavigation), nil
	}
}

func (r rolesNavigationDo) Last() (*model.RolesNavigation, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RolesNavigation), nil
	}
}

func (r rolesNavigationDo) Find() ([]*model.RolesNavigation, error) {
	result, err := r.DO.Find()
	return result.([]*model.RolesNavigation), err
}

func (r rolesNavigationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RolesNavigation, err error) {
	buf := make([]*model.RolesNavigation, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r rolesNavigationDo) FindInBatches(result *[]*model.RolesNavigation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r rolesNavigationDo) Attrs(attrs ...field.AssignExpr) *rolesNavigationDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r rolesNavigationDo) Assign(attrs ...field.AssignExpr) *rolesNavigationDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r rolesNavigationDo) Joins(fields ...field.RelationField) *rolesNavigationDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r rolesNavigationDo) Preload(fields ...field.RelationField) *rolesNavigationDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r rolesNavigationDo) FirstOrInit() (*model.RolesNavigation, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RolesNavigation), nil
	}
}

func (r rolesNavigationDo) FirstOrCreate() (*model.RolesNavigation, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RolesNavigation), nil
	}
}

func (r rolesNavigationDo) FindByPage(offset int, limit int) (result []*model.RolesNavigation, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r rolesNavigationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r rolesNavigationDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r rolesNavigationDo) Delete(models ...*model.RolesNavigation) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *rolesNavigationDo) withDO(do gen.Dao) *rolesNavigationDo {
	r.DO = *do.(*gen.DO)
	return r
}
