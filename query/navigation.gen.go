// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"join/model"
)

func newNavigation(db *gorm.DB, opts ...gen.DOOption) navigation {
	_navigation := navigation{}

	_navigation.navigationDo.UseDB(db, opts...)
	_navigation.navigationDo.UseModel(&model.Navigation{})

	tableName := _navigation.navigationDo.TableName()
	_navigation.ALL = field.NewAsterisk(tableName)
	_navigation.CreatedAt = field.NewInt64(tableName, "created_at")
	_navigation.CreatedBy = field.NewString(tableName, "created_by")
	_navigation.ModifiedAt = field.NewInt64(tableName, "modified_at")
	_navigation.ModifiedBy = field.NewString(tableName, "modified_by")
	_navigation.DeletedAt = field.NewInt64(tableName, "deleted_at")
	_navigation.DeletedBy = field.NewString(tableName, "deleted_by")
	_navigation.NavigationID = field.NewString(tableName, "navigation_id")
	_navigation.NavigationName = field.NewString(tableName, "navigation_name")
	_navigation.ParentNavigationID = field.NewString(tableName, "parent_navigation_id")
	_navigation.SortOrder = field.NewInt32(tableName, "sort_order")
	_navigation.URLPath = field.NewString(tableName, "url_path")
	_navigation.IsActive = field.NewBool(tableName, "is_active")

	_navigation.fillFieldMap()

	return _navigation
}

type navigation struct {
	navigationDo navigationDo

	ALL                field.Asterisk
	CreatedAt          field.Int64
	CreatedBy          field.String
	ModifiedAt         field.Int64
	ModifiedBy         field.String
	DeletedAt          field.Int64
	DeletedBy          field.String
	NavigationID       field.String
	NavigationName     field.String
	ParentNavigationID field.String
	SortOrder          field.Int32
	URLPath            field.String
	IsActive           field.Bool

	fieldMap map[string]field.Expr
}

func (n navigation) Table(newTableName string) *navigation {
	n.navigationDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n navigation) As(alias string) *navigation {
	n.navigationDo.DO = *(n.navigationDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *navigation) updateTableName(table string) *navigation {
	n.ALL = field.NewAsterisk(table)
	n.CreatedAt = field.NewInt64(table, "created_at")
	n.CreatedBy = field.NewString(table, "created_by")
	n.ModifiedAt = field.NewInt64(table, "modified_at")
	n.ModifiedBy = field.NewString(table, "modified_by")
	n.DeletedAt = field.NewInt64(table, "deleted_at")
	n.DeletedBy = field.NewString(table, "deleted_by")
	n.NavigationID = field.NewString(table, "navigation_id")
	n.NavigationName = field.NewString(table, "navigation_name")
	n.ParentNavigationID = field.NewString(table, "parent_navigation_id")
	n.SortOrder = field.NewInt32(table, "sort_order")
	n.URLPath = field.NewString(table, "url_path")
	n.IsActive = field.NewBool(table, "is_active")

	n.fillFieldMap()

	return n
}

func (n *navigation) WithContext(ctx context.Context) *navigationDo {
	return n.navigationDo.WithContext(ctx)
}

func (n navigation) TableName() string { return n.navigationDo.TableName() }

func (n navigation) Alias() string { return n.navigationDo.Alias() }

func (n navigation) Columns(cols ...field.Expr) gen.Columns { return n.navigationDo.Columns(cols...) }

func (n *navigation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *navigation) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 12)
	n.fieldMap["created_at"] = n.CreatedAt
	n.fieldMap["created_by"] = n.CreatedBy
	n.fieldMap["modified_at"] = n.ModifiedAt
	n.fieldMap["modified_by"] = n.ModifiedBy
	n.fieldMap["deleted_at"] = n.DeletedAt
	n.fieldMap["deleted_by"] = n.DeletedBy
	n.fieldMap["navigation_id"] = n.NavigationID
	n.fieldMap["navigation_name"] = n.NavigationName
	n.fieldMap["parent_navigation_id"] = n.ParentNavigationID
	n.fieldMap["sort_order"] = n.SortOrder
	n.fieldMap["url_path"] = n.URLPath
	n.fieldMap["is_active"] = n.IsActive
}

func (n navigation) clone(db *gorm.DB) navigation {
	n.navigationDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n navigation) replaceDB(db *gorm.DB) navigation {
	n.navigationDo.ReplaceDB(db)
	return n
}

type navigationDo struct{ gen.DO }

func (n navigationDo) Debug() *navigationDo {
	return n.withDO(n.DO.Debug())
}

func (n navigationDo) WithContext(ctx context.Context) *navigationDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n navigationDo) ReadDB() *navigationDo {
	return n.Clauses(dbresolver.Read)
}

func (n navigationDo) WriteDB() *navigationDo {
	return n.Clauses(dbresolver.Write)
}

func (n navigationDo) Session(config *gorm.Session) *navigationDo {
	return n.withDO(n.DO.Session(config))
}

func (n navigationDo) Clauses(conds ...clause.Expression) *navigationDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n navigationDo) Returning(value interface{}, columns ...string) *navigationDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n navigationDo) Not(conds ...gen.Condition) *navigationDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n navigationDo) Or(conds ...gen.Condition) *navigationDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n navigationDo) Select(conds ...field.Expr) *navigationDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n navigationDo) Where(conds ...gen.Condition) *navigationDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n navigationDo) Order(conds ...field.Expr) *navigationDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n navigationDo) Distinct(cols ...field.Expr) *navigationDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n navigationDo) Omit(cols ...field.Expr) *navigationDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n navigationDo) Join(table schema.Tabler, on ...field.Expr) *navigationDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n navigationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *navigationDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n navigationDo) RightJoin(table schema.Tabler, on ...field.Expr) *navigationDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n navigationDo) Group(cols ...field.Expr) *navigationDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n navigationDo) Having(conds ...gen.Condition) *navigationDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n navigationDo) Limit(limit int) *navigationDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n navigationDo) Offset(offset int) *navigationDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n navigationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *navigationDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n navigationDo) Unscoped() *navigationDo {
	return n.withDO(n.DO.Unscoped())
}

func (n navigationDo) Create(values ...*model.Navigation) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n navigationDo) CreateInBatches(values []*model.Navigation, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n navigationDo) Save(values ...*model.Navigation) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n navigationDo) First() (*model.Navigation, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Navigation), nil
	}
}

func (n navigationDo) Take() (*model.Navigation, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Navigation), nil
	}
}

func (n navigationDo) Last() (*model.Navigation, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Navigation), nil
	}
}

func (n navigationDo) Find() ([]*model.Navigation, error) {
	result, err := n.DO.Find()
	return result.([]*model.Navigation), err
}

func (n navigationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Navigation, err error) {
	buf := make([]*model.Navigation, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n navigationDo) FindInBatches(result *[]*model.Navigation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n navigationDo) Attrs(attrs ...field.AssignExpr) *navigationDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n navigationDo) Assign(attrs ...field.AssignExpr) *navigationDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n navigationDo) Joins(fields ...field.RelationField) *navigationDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n navigationDo) Preload(fields ...field.RelationField) *navigationDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n navigationDo) FirstOrInit() (*model.Navigation, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Navigation), nil
	}
}

func (n navigationDo) FirstOrCreate() (*model.Navigation, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Navigation), nil
	}
}

func (n navigationDo) FindByPage(offset int, limit int) (result []*model.Navigation, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n navigationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n navigationDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n navigationDo) Delete(models ...*model.Navigation) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *navigationDo) withDO(do gen.Dao) *navigationDo {
	n.DO = *do.(*gen.DO)
	return n
}
